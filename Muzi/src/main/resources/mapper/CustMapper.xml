<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.Toy2.Cust.Dao.CustDao">

    <!-- 고객수 조회 -->
    <select id="count" resultType="int">
        select count(*) from cust;
    </select>

    <!-- 회원가입 -->
    <insert id="custInsert" parameterType="CustDto">
        insert into cust(c_email, c_pwd, c_name, c_nick, c_birth, c_gnd, c_phn, c_zip, c_road_a, c_det_a, sms_agr, email_agr)
        values (#{c_email}, #{c_pwd}, #{c_name}, #{c_nick}, #{c_birth}, #{c_gnd}, #{c_phn}, #{c_zip}, #{c_road_a}, #{c_det_a}, #{sms_agr}, #{email_agr})
    </insert>

    <!-- 이메일 조회해서 고객검색 -->
    <select id="selectEmail" parameterType="String" resultType="CustDto">
        select * from cust where c_email = #{c_email}
    </select>

    <!-- 모든고객조회 -->
    <select id="getCustAll" resultType="CustDto">
        select * from cust
    </select>

    <!-- 시스템컬럼 마지막 작성자, 날짜 추가 2개 + 닉네임 중복 -->
    <!-- 고객정보 변경 -->
    <update id="updateCust" parameterType="CustDto">
        update cust
        <set>
            <if test="c_pwd != null">c_pwd = #{c_pwd},</if>
            <if test="c_name != null">c_name = #{c_name},</if>
            <if test="c_nick != null">c_nick = #{c_nick},</if>
            <if test="c_phn != null">c_phn = #{c_phn},</if>
            <if test="c_zip != null">c_zip = #{c_zip},</if>
            <if test="c_road_a != null">c_road_a = #{c_road_a},</if>
            <if test="c_det_a != null">c_det_a = #{c_det_a},</if>
        </set>
        where c_email = #{c_email}
    </update>

    <!--날짜기록 작성해야함 -->
    <!-- 삭제: 고객이 계정을 삭제할때 고객 상태코드만 변경 -->
    <update id="deleteCustChangeStatusCode" parameterType="String">
        update cust
        set c_stat_cd = 'D'
        and last_mod_dt = now()
        and last_mod_id = #{c_email}
        where c_email = #{c_email}
    </update>


    <!-- SERVICE DAO 구현해야함 -->
    <!-- 휴먼: admin이 N 이면서, 로그인일자가 1년 이상인 고객 상태코드 H으로 변경 -->
    <update id="notLoginUserStatusCodeUpdate" parameterType="String">
        update cust
        set c_stat_cd = 'H'
        where c_admin = 'N'
          and c_email= #{c_email}
          and (login_dt is null or datediff(now(), login_dt)>365)
    </update>

    <!-- 최종 로그인 기록 -->
    <update id="updateLogin" parameterType="String">
        update cust
        set login_dt = now()
        where c_email = #{c_email}
    </update>

    <!-- 모든고객 삭제 -->
    <delete id="deleteAll">
        delete from cust
    </delete>

    <!-- 선택고객 삭제 -->
    <delete id="selectCustDelete" parameterType="String">
        delete from cust
        where c_email = #{c_email}
    </delete>
</mapper>